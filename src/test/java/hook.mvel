secret = "32byteslongsecretkeyforaes256!aa".getBytes();
iv = "16byteslongiv456".getBytes();
paramMap = ["iv": iv];

algorithm = "AES/CBC/PKCS5Padding";

function getData(content){
	return Base64.getDecoder().decode(JsonParser.jsonStrToMap(new String(content)).get("data"));
}

function toData(content){
	return JsonParser.toJsonStr(["data": Base64.getEncoder().encodeToString(content)]).getBytes();
}


function hookRequestToBurp(request){
	request.content = CryptoUtil.aesDecrypt(algorithm, getData(request.content), secret, paramMap);
}

function hookRequestToServer(request){
	request.content = toData(CryptoUtil.aesEncrypt(algorithm, request.content, secret, paramMap));
}

function hookResponseToBurp(response){
	response.content = CryptoUtil.aesDecrypt(algorithm, getData(response.content), secret, paramMap);
}

function hookResponseToClient(response){
	response.content = toData(CryptoUtil.aesEncrypt(algorithm, response.content, secret, paramMap));
}