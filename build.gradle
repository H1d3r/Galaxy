// from https://github.com/grpc/grpc-java/blob/master/examples/build.gradle

plugins {
    id "java"
    id "com.google.protobuf" version "0.9.4"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = "org.m2sec"
def version = "3.2.1"
def optionalHooker = "all" // all/js/graalpy/grpc/basic(default)

def grpcVersion = "1.54.1"
def graalVersion = "24.1.0"
def protobufVersion = "3.24.0"
def protocVersion = protobufVersion
def versionFile = file("${projectDir}/src/main/resources/version.txt") as Object

repositories {
//    mavenCentral()
    maven { url "https://maven.aliyun.com/repository/public" }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

shadowJar {
    archiveClassifier.set(version + "-" + optionalHooker)

    // 设置版本文件
    versionFile.text = version

    // 合并服务文件，避免多个 jar 文件中的 META-INF/services 冲突
    mergeServiceFiles()
}


dependencies {

    if (optionalHooker == "all") {
        // cross-language
        implementation "org.graalvm.js:js-language:${graalVersion}"
        implementation "org.graalvm.python:python-language:${graalVersion}"
        implementation "org.graalvm.python:python-resources:${graalVersion}"
        // grpc
        runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    } else if (optionalHooker == "js") {
        // cross-language
        implementation "org.graalvm.js:js-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-resources:${graalVersion}"
        // grpc
        compileOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        compileOnly "io.grpc:grpc-protobuf:${grpcVersion}"
        compileOnly "io.grpc:grpc-stub:${grpcVersion}"
        compileOnly "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    } else if (optionalHooker == "graalpy") {
        // cross-language
        compileOnly "org.graalvm.js:js-language:${graalVersion}"
        implementation "org.graalvm.python:python-language:${graalVersion}"
        implementation "org.graalvm.python:python-resources:${graalVersion}"
        // grpc
        compileOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        compileOnly "io.grpc:grpc-protobuf:${grpcVersion}"
        compileOnly "io.grpc:grpc-stub:${grpcVersion}"
        compileOnly "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    } else if (optionalHooker == "grpc") {
        // cross-language
        implementation "org.graalvm.sdk:graal-sdk:${graalVersion}"
        compileOnly "org.graalvm.js:js-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-resources:${graalVersion}"
        // grpc
        runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    } else {
        // cross-language
        implementation "org.graalvm.sdk:graal-sdk:${graalVersion}"
        compileOnly "org.graalvm.js:js-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-language:${graalVersion}"
        compileOnly "org.graalvm.python:python-resources:${graalVersion}"
        // grpc
        compileOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        compileOnly "io.grpc:grpc-protobuf:${grpcVersion}"
        compileOnly "io.grpc:grpc-stub:${grpcVersion}"
        compileOnly "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    }
    compileOnly 'org.python:jython:2.7.3'
    // annotation
    annotationProcessor "org.projectlombok:lombok:1.18.32"
    compileOnly "org.projectlombok:lombok:1.18.32"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    // yaml
    implementation "org.yaml:snakeyaml:2.2"
    // gson
    implementation 'com.google.code.gson:gson:2.9.0'
    // crypto
    compileOnly "org.bouncycastle:bcprov-jdk18on:1.78.1"
    // template
    implementation "org.apache.commons:commons-text:1.12.0"
    // log
    implementation "org.slf4j:slf4j-api:2.0.13"
    implementation "ch.qos.logback:logback-classic:1.5.6"
    // code text area
    implementation "com.fifesoft:rsyntaxtextarea:3.4.1"
    implementation "com.fifesoft:autocomplete:3.3.1"
    // express
    implementation "org.mvel:mvel2:2.5.2.Final"
    // client
    implementation "cn.hutool:hutool-http:5.8.29"
    implementation 'org.java-websocket:Java-WebSocket:1.5.7'
    // burp
    compileOnly "net.portswigger.burp.extensions:montoya-api:2023.12.1"
    // test
    testAnnotationProcessor "org.projectlombok:lombok:1.18.32"
    testImplementation platform("org.junit:junit-bom:5.9.1")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "net.portswigger.burp.extensions:montoya-api:2023.12.1"
    testImplementation "org.bouncycastle:bcprov-jdk18on:1.78.1"
    testImplementation "org.projectlombok:lombok:1.18.32"
    testImplementation "com.fifesoft:rsyntaxtextarea:3.4.1"
    testRuntimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    testImplementation "io.grpc:grpc-protobuf:${grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    testImplementation 'org.python:jython:2.7.3'
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs "build/generated/source/proto/main/grpc"
            srcDirs "build/generated/source/proto/main/java"
        }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


